(ns join-test.test
  (:refer-clojure :exclude [map])
  (:use-macros [util.macros :only [profile p pp]]
               [clojure.core.match.js :only [match]])
  ;;(:use [clojure.string :only [join]])
  )

(defn ->arr [c]
  (if (= js/Array (type c))
    c
    (into-array c)))

(defn join
  ([c] (join "" c))
  ([sep c] (.join (->arr c) sep)))

(defn map [f c] (.map (->arr c) f))

(defn geo->svg
  "Convert geoJSON to svg path data. Takes optional projection, defaulting to identity"
  [geo & {:keys [projection]
          :or {projection identity}}]

  (let [project (fn [coordinate]
                  (join "," (projection coordinate)))
        coords->path (fn [coordinates]
                       (str "M"
                            (join "L" (map project coordinates))
                            "Z"))]
    
    ;;See http://geojson.org/geojson-spec.html
    ;;This SVG rendering doesn't implement the full spec.
    (match [geo]
           [{:type "FeatureCollection" :features xs}]
           (join (map #(geo->svg % :projection projection) xs))

           [{:type "Feature" :geometry g}] (geo->svg g :projection projection)

           [{:type "Polygon" :coordinates xs}]
           (join (map coords->path xs))

           [{:type "MultiPolygon" :coordinates xs}]
           ;;It'd be nice to recurse to the actual branch that handles Polygon, instead of repeating...
           (join (map (fn [subpoly]
                        (join (map coords->path subpoly)))
                      xs)))))



(def geojson {:type "MultiPolygon", :coordinates [[[[-89.54221,41.90248],[-89.53985,41.90259],[-89.53815,41.90271],[-89.53576,41.90268],[-89.5139,41.90227],[-89.50549,41.90241],[-89.49903,41.90232],[-89.49539,41.90223],[-89.48267,41.90222],[-89.48164,41.90221],[-89.4786,41.90838],[-89.47641,41.91017],[-89.47255,41.91194],[-89.46606,41.91252],[-89.4508,41.91052],[-89.44468,41.90994],[-89.43685,41.90813],[-89.428,41.9081],[-89.42466,41.90727],[-89.42111,41.9055],[-89.42013,41.90476],[-89.41904,41.90219],[-89.41919,41.90093],[-89.42055,41.89893],[-89.42375,41.89744],[-89.42821,41.89668],[-89.42926,41.89577],[-89.42865,41.89404],[-89.42089,41.88999],[-89.41463,41.88618],[-89.41245,41.88629],[-89.41188,41.88755],[-89.41243,41.8928],[-89.41173,41.89492],[-89.40896,41.89547],[-89.40756,41.89638],[-89.40377,41.9],[-89.40311,41.90227],[-89.39882,41.90222],[-89.38958,41.90271],[-89.3874,41.90276],[-89.36522,41.90279],[-89.36052,41.90264],[-89.36068,41.88807],[-89.34146,41.88803],[-89.28316,41.88792],[-89.28294,41.88815],[-89.28068,41.88829],[-89.28046,41.8882],[-89.25653,41.88844],[-89.22634,41.88888],[-89.16883,41.88947],[-89.15427,41.88972],[-89.15321,41.88973],[-89.14098,41.88981],[-89.11771,41.88992],[-89.10197,41.88999],[-89.08255,41.89009],[-89.07223,41.89043],[-89.06414,41.89053],[-89.05353,41.89059],[-89.05329,41.89039],[-89.03978,41.89055],[-89.0009,41.89104],[-89.00009,41.89114],[-88.99991,41.89113],[-88.99951,41.89113],[-88.98163,41.89131],[-88.98044,41.89139],[-88.95166,41.89166],[-88.94145,41.89178],[-88.9416,41.84806],[-88.94138,41.80445],[-88.94139,41.80226],[-88.9414,41.79912],[-88.9414,41.79731],[-88.9414,41.79713],[-88.9414,41.79694],[-88.9414,41.79579],[-88.94138,41.79498],[-88.94138,41.79113],[-88.94138,41.7904],[-88.94147,41.79002],[-88.94138,41.7897],[-88.9415,41.76077],[-88.94174,41.7275],[-88.94177,41.72595],[-88.94174,41.72378],[-88.9418,41.71716],[-88.9407,41.7171],[-88.93963,41.688],[-88.93929,41.66447],[-88.93947,41.66429],[-88.93923,41.65372],[-88.93898,41.64306],[-88.93886,41.63819],[-88.93863,41.6282],[-88.97721,41.62759],[-88.97745,41.62762],[-88.99647,41.62727],[-88.99696,41.62724],[-89.00008,41.6274],[-89.00135,41.62738],[-89.00524,41.62731],[-89.03549,41.62676],[-89.05182,41.62664],[-89.1098,41.62737],[-89.12,41.62759],[-89.12919,41.62775],[-89.14839,41.62817],[-89.1672,41.62871],[-89.16699,41.61464],[-89.16681,41.60405],[-89.16673,41.59941],[-89.16669,41.59531],[-89.16651,41.58503],[-89.16663,41.58505],[-89.19024,41.58517],[-89.22277,41.58514],[-89.23003,41.58524],[-89.23166,41.5853],[-89.25297,41.58523],[-89.25654,41.58523],[-89.27695,41.58512],[-89.28561,41.58504],[-89.29986,41.58494],[-89.30983,41.58487],[-89.31575,41.58484],[-89.3212,41.5848],[-89.36472,41.58481],[-89.3719,41.58478],[-89.3891,41.58473],[-89.39124,41.58472],[-89.39477,41.5847],[-89.40077,41.58466],[-89.5125,41.585],[-89.51609,41.58495],[-89.53169,41.58491],[-89.58979,41.58489],[-89.6186,41.58487],[-89.62837,41.5849],[-89.63147,41.58492],[-89.632,41.62127],[-89.63231,41.67137],[-89.63227,41.68605],[-89.63217,41.70048],[-89.63169,41.75826],[-89.63156,41.76272],[-89.63142,41.76905],[-89.63117,41.77961],[-89.63064,41.80835],[-89.63067,41.80849],[-89.63048,41.82278],[-89.63026,41.84378],[-89.6302,41.87287],[-89.6298,41.90175],[-89.58124,41.90213],[-89.57225,41.90217],[-89.56239,41.90222],[-89.54221,41.90248]]]]})


(profile "geojson"
         (doseq [_ (range 1000)]
           (geo->svg geojson)))





;; (def A (range 10000))

;; (profile "join"
;;          (join A))

;; (profile "into arr, then native join"
;;          (.join (into (array) A)))
